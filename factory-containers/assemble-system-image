#!/usr/bin/python3
#
# Copyright (c) 2019 Foundries.io
# SPDX-License-Identifier: Apache-2.0
#
import subprocess
import os
import requests
import json
import argparse
import logging

logger = logging.getLogger(__name__)


def get_targets_from_api(factory: str, build_num: str, token: str):
    api_base_url = 'https://api.foundries.io/ota/repo/'
    targets_endpoint = 'api/v1/user_repo/targets.json'

    res_targets = []
    target_url = os.path.join(api_base_url, factory, targets_endpoint)
    target_resp = requests.get(target_url, headers={'OSF-TOKEN': token})
    target_resp.raise_for_status()

    for target_name, target in target_resp.json()['signed']['targets'].items():
        custom = target.get('custom')
        if not custom:
            continue

        if custom.get('version', '') == build_num and custom.get('targetFormat', 'NONE') == 'OSTREE':
            res_targets.append({target_name: target})

    return res_targets


# ${IMAGE_BASENAME}-${MACHINE}.wic.gz
# https://api.foundries.io/projects/msul-dev01/lmp/builds/224/runs/raspberrypi3-64/lmp-factory-image-raspberrypi3-64.wic.gz
def get_system_image_from_ci(base_uri: str, image_name: str, image_machine: str, token: str):
    base_uri = base_uri.replace('ci.foundries.io', 'api.foundries.io')
    target_image_file = '{}-{}.wic.gz'.format(image_name, image_machine)
    image_url = os.path.join(base_uri, 'runs', image_machine, target_image_file)
    logger.info('Fetching ' + image_url)
    image_resp = requests.get(image_url, headers={'OSF-TOKEN': token})
    image_resp.raise_for_status()
    with open(target_image_file, 'wb') as image_file:
        for data_chunk in image_resp.iter_content(chunk_size=65536):
            image_file.write(data_chunk)

    subprocess.check_call(['gunzip', '-f', target_image_file])
    return target_image_file.rstrip('.gz')


def get_args():
    parser = argparse.ArgumentParser('''Add container images to a system image''')

    parser.add_argument('-f', '--factory', help='Factory', default=os.environ.get('FACTORY'))
    #parser.add_argument('-p', '--project', help='Factory project <factory>/lmp', default=os.environ.get('H_PROJECT'))
    parser.add_argument('-b', '--build-num', help='Build number', default=os.environ.get('H_BUILD'))
    parser.add_argument('-t', '--token-file', help='A file containing OSF token', default='/secrets/osftok')
    parser.add_argument('-w', '--wic-tool', help='A path to WIC utility', default=os.environ.get('WIC_TOOL'))
    parser.add_argument('-a', '--app-image-dir', help='A path to directory that contains app container images',
                        default=os.environ.get('APP_IMAGE_DIR'))
    parser.add_argument('-o', '--out-image-dir', help='A path to directory to put a resultant image to',
                        default=os.environ.get('OUT_IMAGE_DIR'))

    args = parser.parse_args()

    if args.factory is None:
        logger.error('Argument `Factory` is missing, specify it either as a command line argument'
                     ' or a FACTORY environment variable')
        parser.print_help()
        exit(1)

    if args.build_num is None:
        logger.error('Argument `Build number` is missing, specify it either as a command line argument'
                     ' or an H_BUILD environment variable')
        parser.print_help()
        exit(1)

    if args.token_file is None:
        logger.error('Argument `Token file` is missing, specify it either as a command line argument'
                     ' or put it into `/secrets/osftok`')
        parser.print_help()
        exit(1)

    else:
        with open(args.token_file) as token_file:
            vars(args)['token'] = token_file.read().strip()

    if args.wic_tool is None:
        logger.error('Argument `WIC tool` is missing, specify it either as a command line argument'
                     ' or a WIC_TOOL environment variable')
        parser.print_help()
        exit(1)

    if args.app_image_dir is None:
        logger.error('Argument `App Image Dir` is missing, specify it either as a command line argument'
                     ' or a APP_IMAGE_DIR environment variable')
        parser.print_help()
        exit(1)

    if args.out_image_dir is None:
        logger.error('Argument `Out Image Dir` is missing, specify it either as a command line argument'
                     ' or a OUT_IMAGE_DIR environment variable')
        parser.print_help()
        exit(1)

    return args


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    args = get_args()

    logger.info('Fetching factory targets; factory: {}, version: {}'.format(args.factory, args.build_num))
    targets = get_targets_from_api(args.factory, args.build_num, args.token)

    for target in targets:
        if len(target) != 1:
            raise Exception('Got invalid Targets from TUF server: ' + str(targets))

        target_name = next(iter(target))
        logger.info('Got Target {}, processing it...'.format(target_name))

        image_base_url = target[target_name]['custom']['uri']
        image_machine = target[target_name]['custom']['hardwareIds'][0]
        # TODO: Fix hardcoding
        image_name = 'lmp-factory-image'
        wic_image = '{}-{}.wic'.format(image_name, image_machine)

        logger.info('Fetching a WIC image for Target: {}'.format(target_name))
        get_system_image_from_ci(image_base_url, image_name, image_machine, args.token)

        containers_sha = target[target_name]['custom']['containers-sha']

        #containers_arch = target[target_name]['custom']['arch']
        # TODO: Fix:  proper solution for finding
        containers_arch = 'arm64' if image_machine == 'raspberrypi3-64' else 'amd64'

        app_image_tar_src = os.path.join(args.app_image_dir, containers_sha, '{}-{}.tar'.
                                         format(containers_sha, containers_arch))
        app_image_tar_dst = wic_image + ':2/ostree/deploy/lmp/var/sota/import/'

        logger.info('Copying Target app container images to its WIC image: {} --> {}'
                    .format(app_image_tar_src, app_image_tar_dst))
        subprocess.check_call([args.wic_tool, 'cp', app_image_tar_src, app_image_tar_dst])

        # TODO: update installed_versions

        logger.info('Move resultant WIC image to the specified destination folder: {}'.format(args.out_image_dir))
        subprocess.check_call(['mv', wic_image, args.out_image_dir])
