#!/usr/bin/python3
#
# Copyright (c) 2020 Foundries.io
# SPDX-License-Identifier: Apache-2.0
#

import argparse
import logging
import json
import os

from factory_client import FactoryClient
from apps.target_apps_store import ArchiveTargetAppsStore
from apps.ostree_store import OSTreeTargetAppsStore, OSTreeRepo


logger = logging.getLogger(__name__)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('installed_versions', help='A file that contains a Target json with list of'
                                                   'Compose Apps to be preloaded')
    parser.add_argument('docker_data_root_dir', help='A directory to preload container images to')

    # TODO: remove it from here one the corresponding change in meta-lmp is used on all devices
    parser.add_argument('arch', nargs='?', default='none')

    parser.add_argument('--images-root-dir', default='/var/cache/bitbake/app-images/',
                        help='A root directory that contains stored Compose Apps and their images')
    parser.add_argument('--apps-tree-dir', default=None,
                        help='A path in the scope of a rootfs to an ostree repo that contains'
                             ' Compose Apps and their images')
    parser.add_argument('--apps-root-dir', default=None, help='A path to Compose Apps root dir')
    parser.add_argument('--factory', default=None)
    parser.add_argument('--creds-arch', default=None)
    parser.add_argument('-s', '--app-shortlist', help='A coma separated list of Target Apps'
                                                      ' to include into a system image', default=None)
    parser.add_argument('--fail-on-error', action='store_true',
                        help='Fail OE build if an error occurs')

    parser.add_argument('--log-file', default='/archive/preload-app-images.log',
                        help='A file to output logs to')

    args = parser.parse_args()

    if args.app_shortlist:
        args.app_shortlist = args.app_shortlist.split(',')
        if not args.apps_root_dir:
            args.apps_root_dir = args.dst_dir.replace("var/lib/docker", "var/sota/compose-apps")

    return args


def preload_app_images(target_json_file_filepath, app_shortlist, src_app_images_root_dir,
                       dst_apps_tree_dir, dst_apps_root_dir, dst_docker_data_root_dir, factory):
    with open(target_json_file_filepath) as target_json_file:
        target_json = json.load(target_json_file)

    target_name = list(target_json.keys())[0]
    target = FactoryClient.Target(target_name, target_json[target_name])

    if app_shortlist:
        target.shortlist = app_shortlist

    logger.info('Preloading Compose Apps; Target: ' + target.name)
    preloaded = False

    try:
        # TODO: avoid hardcoding of `ostree-repo` path
        src_apps_tree_dir = os.path.join(src_app_images_root_dir, 'ostree-repo')
        if os.path.exists(src_apps_tree_dir):
            _preload_app_images_from_ostree(target, src_apps_tree_dir, dst_apps_tree_dir,
                                            dst_apps_root_dir, dst_docker_data_root_dir,
                                            factory)
        preloaded = True
    except Exception as exc:
        logger.warning('Failed to preload Apps from an ostree repo,'
                       ' fallback to preloading from an archive; err: {}'.format(exc))

    if not preloaded:
        # Fallback to preloading from an archive
        _preload_app_images_from_archive(target, src_app_images_root_dir,
                                         dst_apps_root_dir, dst_docker_data_root_dir)


def _preload_app_images_from_ostree(target, src_apps_tree_dir, dst_apps_tree_dir,
                                    dst_apps_root_dir, dst_docker_data_root_dir,
                                    factory):
    logger.info('Preloading Apps from an ostree repo; src={}, dst={}'.format(src_apps_tree_dir, dst_apps_tree_dir))
    src_store = OSTreeTargetAppsStore(src_apps_tree_dir, create=False, factory=factory)
    src_store.copy_and_checkout(target, dst_apps_tree_dir, dst_apps_root_dir, dst_docker_data_root_dir)


def _preload_app_images_from_archive(target, app_images_root_dir, dst_apps_root_dir, dst_docker_data_root_dir):
    logger.info('Preloading Apps from an archive')
    target_apps_store = ArchiveTargetAppsStore(app_images_root_dir)
    logging.info('Preloading app images for %s - %s', target.name, target.shortlist)
    _, app_image_tar, _ = target_apps_store.apps_location(target)

    if not target_apps_store.exist(target) and not target_apps_store.exist(target, just_images=True):
        logger.error('The app images are missing; container sha: {},'
                     ' location: {}'.format(target.sha, app_image_tar))
    else:
        target_apps_store.copy(target, dst_docker_data_root_dir, dst_apps_root_dir)


if __name__ == '__main__':
    args = get_args()

    logging.basicConfig(level='INFO')
    fh = logging.FileHandler(args.log_file)
    formatter = logging.Formatter('%(asctime)s %(levelname)s: %(module)s: %(message)s')
    fh.setFormatter(formatter)
    logging.getLogger().addHandler(fh)

    try:
        preload_app_images(args.installed_versions,
                           args.app_shortlist,
                           args.images_root_dir,
                           args.apps_tree_dir,
                           args.apps_root_dir,
                           args.docker_data_root_dir, args.factory)
    except Exception as exc:
        logger.exception('Failed to preload Apps images: {}'.format(exc))
        if args.fail_on_error:
            exit(1)

    # we return 0/successful exit code regardless of the preloading status to make sure
    # that the LmP/bitbake job, that invoked the given preloading script, proceeds further (is not interrupted)
    exit(0)
