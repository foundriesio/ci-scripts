#!/usr/bin/python3
#
# Copyright (c) 2020 Foundries.io
# SPDX-License-Identifier: Apache-2.0
#

import argparse
import logging
import json
import os

from apps.target_apps_store import ArchiveTargetAppsStore
from factory_client import FactoryClient


logger = logging.getLogger(__name__)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('installed_versions')
    parser.add_argument('dst_dir')
    # TODO: remove it from here and meta-lmp
    parser.add_argument('arch', nargs='?', default='none')
    parser.add_argument('--images-root-dir', default=os.getenv('APP_IMAGE_DIR',
                                                               '/var/cache/bitbake/app-images/'))
    parser.add_argument('--archive-dir', default='/archive')
    parser.add_argument('--apps-root-dir', default=None, help='A path to Compose Apps root dir')
    return parser.parse_args()


def preload_app_images(target_json_file_filepath, app_images_root_dir, dst_apps_root_dir, dst_docker_data_root_dir):
    with open(target_json_file_filepath) as target_json_file:
        target_json = json.load(target_json_file)

    target_name = list(target_json.keys())[0]
    target = FactoryClient.Target(target_name, target_json[target_name])

    target_apps_store = ArchiveTargetAppsStore(app_images_root_dir)
    logging.info('Preloading app images for ' + target.name)
    _, app_image_tar, _ = target_apps_store.apps_location(target)

    if not target_apps_store.exist(target) and not target_apps_store.exist(target, just_images=True):
        logger.error('The app images are missing; container sha: {},'
                     ' location: {}'.format(target.sha, app_image_tar))
    else:
        target_apps_store.copy(target, dst_docker_data_root_dir, dst_apps_root_dir)


if __name__ == '__main__':
    args = get_args()

    logging.basicConfig(level='INFO')
    fh = logging.FileHandler(os.path.join(args.archive_dir, 'preload-app-images.log'))
    formatter = logging.Formatter('%(levelname)s: App Images Preloader: %(module)s: %(message)s')
    fh.setFormatter(formatter)
    logging.getLogger().addHandler(fh)

    try:
        preload_app_images(args.installed_versions, args.images_root_dir, args.apps_root_dir, args.dst_dir)
    except Exception as exc:
        logger.warning('Failed to preload Apps images: {}'.format(exc))

    # we return 0/successful exit code regardless of the preloading status to make sure
    # that the LmP/bitbake job, that invoked the given preloading script, proceeds further (is not interrupted)
    exit(0)
