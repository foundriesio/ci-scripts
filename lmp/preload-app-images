#!/usr/bin/python3
#
# Copyright (c) 2020 Foundries.io
# SPDX-License-Identifier: Apache-2.0
#

import argparse
import logging
import json
import os
import subprocess


logging.basicConfig(level='INFO')
fh = logging.FileHandler('/archive/preload-app-images.log')
fh.setFormatter(logging.getLogger().handlers[0].formatter)
logging.getLogger().addHandler(fh)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('installed_versions')
    parser.add_argument('dst_dir')
    parser.add_argument('arch')
    return parser.parse_args()


def preload_app_images(target_json_file_filepath, dst_dir, arch):
    with open(target_json_file_filepath) as target_json_file:
        target_json = json.load(target_json_file)

    target_name = list(target_json.keys())[0]
    logging.info('Preloading app images for ' + target_name)
    sha = target_json[target_name]['custom']['containers-sha']
    image_data_dir = os.path.join('/var/cache/bitbake/app-images/', sha)

    arch_map = {'aarch64': 'arm64', 'x86_64': 'amd64', 'arm': 'arm'}
    image_data_tar = os.path.join(image_data_dir, '{}-{}.tar'.format(sha, arch_map[arch]))

    if not os.path.exists(image_data_tar):
        logging.error('The app images are missing; container sha: {}, arch: {}, image data file: {}'.
                      format(sha, arch, image_data_tar))
        exit(1)

    logging.info('Preloading container images; container sha: {}, arch: {}, dst: {}'.format(sha, arch, dst_dir))
    subprocess.check_call(['tar', '-xf', image_data_tar, '-C', dst_dir])


if __name__ == '__main__':
    args = get_args()
    preload_app_images(args.installed_versions, args.dst_dir, args.arch)
